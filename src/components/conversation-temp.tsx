/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/DDJ4xnvLYiT
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

"use client";
import {
  useEffect,
  useRef,
  useState,
} from "react";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "./ui/button";
import { ArrowUpIcon } from "./icons";
import UserTextResponse from "./userTextResponse";
import AITextResponse from "./aiTextResponse";
import { CoreMessage } from "ai";
import { continueConversation } from "@/app/actions";
import { readStreamableValue } from "ai/rsc";

export function ConversationTemp() {
  const [messages, setMessages] = useState<
    CoreMessage[]
  >([]);
  const [input, setInput] = useState("");
  const bottomRef = useRef<any>(null);

  useEffect(() => {
    if (bottomRef.current) {
      bottomRef.current.scrollIntoView({
        behavior: "smooth",
      });
    }
  }, [messages]);

  return (
    <div className="flex flex-col min-h-screen w-full items-center">
      <div className="flex-col flex flex-1 pt-8 w-3/4 bg-gray-800">
        <div className="sticky top-0 p-2">
          <h1 className="text-lg gap-1 px-3 h-10">
            {" "}
            Language Conversation Partner
          </h1>
        </div>
        <div className="max-w-2xl flex-1 mx-auto flex h-full flex-col items-start gap-8 px-4 overflow-hidden">
          {messages.map((message, i) => {
            return (
              <div
                key={i}
                className="flex items-start gap-4"
              >
                {message.role === "user" ? (
                  <UserTextResponse
                    text={
                      message.content as string
                    }
                  />
                ) : (
                  <AITextResponse
                    text={
                      message.content as string
                    }
                  />
                )}
              </div>
            );
          })}
        </div>
        <div ref={bottomRef}></div>
        <div className="border rounded-md border-transparent max-w-2xl w-full mx-auto my-8 py-2 flex flex-col gap-1.5 px-4 bg-gray-700 dark:bg-gray-700">
          <form
            className="flex flex-col justify-end h-full"
            action={async () => {
              const newMessages: CoreMessage[] = [
                ...messages,
                { role: "user", content: input },
              ];
              setMessages(newMessages);
              setInput("");

              const result =
                await continueConversation(
                  messages
                );

              console.log("result ", result);

              for await (const delta of readStreamableValue(
                result
              )) {
                console.log("delta ", delta);
                setMessages([
                  ...newMessages,
                  {
                    role: "assistant",
                    content: delta as string,
                  },
                ]);
              }
            }}
          >
            <div className="relative">
              <Textarea
                value={input}
                onChange={(e) =>
                  setInput(e.target.value)
                }
                placeholder="Message language partner"
                name="message"
                id="message"
                rows={1}
                className="min-h-[48px] rounded-2xl resize-none p-4 border border-gray-200 shadow-sm pr-16 dark:border-gray-800"
              />
              <Button
                type="submit"
                size="icon"
                className="absolute top-3 right-3 w-8 h-8"
              >
                <ArrowUpIcon className="w-4 h-4" />
                <span className="sr-only">
                  Send
                </span>
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
