/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/DDJ4xnvLYiT
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

"use client";
import { useState } from "react";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "./ui/button";
import { ArrowUpIcon } from "./ui/icons";
import UserTextResponse from "./userTextResponse";
import { useUIState, useActions } from "ai/rsc";
import { ClientMessage } from "@/app/action";

export default function ConversationTemp() {
  const [messages, setMessages] = useUIState();
  const [input, setInput] = useState<string>("");
  const { continueConversation } = useActions();

  return (
    <div className="flex flex-col h-screen bg-gray-800 w-3/4">
      <div className="sticky top-0 z-10 p-2">
        <div className="max-w-2xl mx-auto ">
          <h1 className="text-lg gap-1 px-3 h-10 my-4">
            Language Conversation Partner
          </h1>
        </div>
      </div>
      <div className="flex-col flex flex-1 pt-8 overflow-y-auto">
        <div className="max-w-2xl w-full flex-1 mx-auto flex h-full flex-col items-start gap-8 px-4">
          {messages.map(
            (
              message: ClientMessage,
              i: number
            ) => {
              return (
                <div
                  key={i}
                  className="flex items-start gap-4"
                >
                  {message.display}
                </div>
              );
            }
          )}
        </div>
      </div>
      <div className="border rounded-md border-transparent max-w-2xl w-full mx-auto my-8 py-2 gap-1.5 px-4 bg-gray-700 dark:bg-gray-700">
        <form
          className="flex flex-col"
          onSubmit={async (e) => {
            e.preventDefault();
            setMessages(
              (messages: ClientMessage[]) => [
                ...messages,
                {
                  role: "user",
                  display: (
                    <UserTextResponse
                      text={input}
                    />
                  ),
                },
              ]
            );
            setInput("");

            const message =
              await continueConversation(input);

            setMessages(
              (messages: ClientMessage[]) => [
                ...messages,
                message,
              ]
            );
          }}
        >
          <div className="relative">
            <Textarea
              value={input}
              onChange={(e) =>
                setInput(e.target.value)
              }
              placeholder="Message language partner"
              name="message"
              id="message"
              rows={1}
              className="min-h-[48px] rounded-2xl resize-none p-4 border border-gray-200 shadow-sm pr-16 dark:border-gray-800"
            />
            <Button
              type="submit"
              size="icon"
              className="absolute top-3 right-3 w-8 h-8"
            >
              <ArrowUpIcon className="w-4 h-4" />
              <span className="sr-only">
                Send
              </span>
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
